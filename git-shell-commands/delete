#!/bin/bash

dirname=$(dirname "$0")

# read settings
source $dirname/settings.conf

repodir="/srv/git"
trashdir="/srv/git/trash"
linkdir="/home/git"

# test if at least 1 argument 
if [ -z "$1" ]; then
    echo "Usage: delete <name of repository>"
    exit
fi

################################################################################
# convert input to target name
################################################################################

# remove unwanted parent directories
reponame=$(basename "$1")
#echo $reponame

# remove .git extension (we'll add it)
reponame="${reponame%*.git}"
#echo $reponame

# transliterate to ascii
reponame=$(echo "$reponame" | iconv -f utf-8 -t ascii//translit)
#echo $reponame

# remove strange characters: everything excepty letters, numbers, _ and -
reponame="${reponame//[^[:alnum:] _-]/}"
#echo $reponame

# convert spaces to dashes
reponame="${reponame// /-}"
#echo $reponame

################################################################################


# this repository 
repotarget="$repodir/$reponame.git"
linktarget="$linkdir/$reponame.git"
#echo $repotarget
#echo $linktarget

# test if repo exist
if ! test -d "$repotarget"; then 
  echo "Repository "'"'"$reponame"'"'" does not exist."
  exit
fi 

mkdir -p $trashdir
trashtarget="$trashdir/$reponame.git"
#echo $trashtarget

# test if we can trash our repo, that is, it's not in trash already
if test -d "$trashtarget"; then 
  echo "Can't delete repository - you need to purge the trash manually."
  exit
fi 

# ask for confirmation
read -p "Are you sure you want to delete this repository? If so, type YES: " answer
case ${answer} in
    YES )
	mv "$repotarget" "$trashtarget"
	rm -f "$linktarget"
	echo "Git repository "'"'"$reponame"'"'" deleted :/"
	echo "Use the 'undelete' command to undo"
    ;;
    * )
        echo "Aborted."
    ;;
esac


